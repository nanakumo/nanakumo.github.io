{"meta":{"title":"この夏に🎇","subtitle":"甜品和猫，夏天和你。","description":"欢迎来到小倖的世界","author":"十条倖","url":"https://nanakumo.github.io","root":"/"},"pages":[{"title":"About","date":"2023-03-23T09:51:22.000Z","updated":"2023-03-23T20:20:21.415Z","comments":true,"path":"about/index.html","permalink":"https://nanakumo.github.io/about/index.html","excerpt":"","text":"# 欢迎来到十条倖的小窝🍦 姓名：十条倖 年龄： 实际年龄：6000 万年 人类年龄：24 周岁 经历：原本是一颗名叫 β Aquarii 的超巨星，因为爱上了恒星 Regulus 而失去自己的心脏，于是坠入 540 光年之外的地球。所以小倖现在正在地球上扮演一名正常人类。 时区：UTC+09:00 喜欢的：甜品和猫 在做的： 写小说 计算机入门 学经济的。研究方向：开发经济学、经济政策 联系方式 ： Matrix：https://matrix.to/#/@nanakumo:sakura.ci Mail：mailto:frrrsdsuud@duck.com # 这里会写些什么 可爱的日常 不擅长的计算机 苦逼的学术生活 # 最后的话 感谢你点进来 ——！ここまでご覧いただき誠にありがとうございます。"},{"title":"友情链接","date":"2023-08-25T15:56:40.182Z","updated":"2023-08-25T15:56:40.182Z","comments":true,"path":"friends/index.html","permalink":"https://nanakumo.github.io/friends/index.html","excerpt":"","text":"# 本站信息 站名： 小倖的窝 站长： 十条倖 地址： https://nanakumo.github.io 简介： 猫和甜品，夏天和你。 # 小伙伴们 凛子 夏天和你，我都要带走。 风儿姐姐 写诗画画码代码的。 诗音 可能只是一隻貓，或是貓娘。 Horace Young I like games, cooking, pixel arts, harmonica, and fediverse. Rikki wired person, trying to find myself."},{"title":"目录","date":"2023-03-23T09:49:44.000Z","updated":"2023-03-23T20:02:35.534Z","comments":true,"path":"categories/index.html","permalink":"https://nanakumo.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-23T09:50:30.000Z","updated":"2023-03-23T20:02:43.801Z","comments":true,"path":"tags/index.html","permalink":"https://nanakumo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Firefish | 菜鸟级别利用docker-compose搭建Fedi实例","slug":"菜鸟级别利用docker-compose搭建Firefish实例","date":"2023-08-24T12:49:19.316Z","updated":"2023-08-25T15:26:19.857Z","comments":true,"path":"2023/08/24/菜鸟级别利用docker-compose搭建Firefish实例/","link":"","permalink":"https://nanakumo.github.io/2023/08/24/%E8%8F%9C%E9%B8%9F%E7%BA%A7%E5%88%AB%E5%88%A9%E7%94%A8docker-compose%E6%90%AD%E5%BB%BAFirefish%E5%AE%9E%E4%BE%8B/","excerpt":"2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。","text":"2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。 # 搭建过程 因为是用 Docker-compose 搭建实例，所以默认机器上是有 Docker 容器的。在此基础上，先在任意目录下新建 docker-compose.yml 文件。比如: mkdir /firefish &amp;&amp; cd /firefishnano docker-compose.yml然后写入以下： version: \"3\"services: web: image: registry.joinfirefish.org/firefish/firefish container_name: firefish_web restart: unless-stopped depends_on: - db - redis### Uncomment one of the following to use a search engine# - meilisearch# - sonic ports: - \"3000:3000\" networks: - calcnet# - web environment: NODE_ENV: production volumes: - ./files:/firefish/files - ./.config:/firefish/.config:ro redis: restart: unless-stopped image: docker.io/redis:7.0-alpine container_name: firefish_redis networks: - calcnet volumes: - ./redis:/data db: restart: unless-stopped image: docker.io/postgres:12.2-alpine container_name: firefish_db networks: - calcnet env_file: - .config/docker.env volumes: - ./db:/var/lib/postgresql/data### Only one of the below should be used.### Meilisearch is better overall, but resource-intensive. Sonic is a very light full text search engine.# meilisearch:# container_name: meilisearch# image: getmeili/meilisearch:v1.1.1# environment:# - MEILI_ENV=$&#123;MEILI_ENV:-development&#125;# ports:# - \"7700:7700\"# networks:# - calcnet# volumes:# - ./meili_data:/meili_data# restart: unless-stopped# sonic:# restart: unless-stopped# image: docker.io/valeriansaliou/sonic:v1.4.0# networks:# - calcnet# volumes:# - ./sonic:/var/lib/sonic/store# - ./sonic/config.cfg:/etc/sonic.cfgnetworks: calcnet: # web: # external: # name: web 注意： 如果此前搭建过 Misskey 的话，那么端口号 3000 应当是冲突的，这时候需要把 web 下面的 ports 改成其他端口，比如 4000:4000 。 写完 docker-compose.yml 文件之后，需要在 firefish 的根目录下新建 .config 文件夹，在里头装入 default.yml 和 docker.env 这两个文件。 注意： 需要重命名：example.yml -&gt; default.yml &amp;&amp; docker_example.env -&gt; docker.env 修改 default.yml 的内容：url -&gt; 自己的域名 &amp;&amp; db localhost -&gt; firefish_db &amp;&amp; redis localhost -&gt; redis （备注：localhost 一定要修改，博主就是在这里卡了好久 QAQ） （可选）修改 default.yml 中的 port，如果端口有冲突的话。修改 db 的 user 和 pass，且两个文件一定要 match。 待文件写入完毕之后，便可使容器上线： docker-compose up -d # 反向代理：Nginx 这一部分的话，大概有很多种操作方法，我只写了我使用的一种：利用 Certbot 获取证书然后用 Nginx 反向代理。 &lt;u&gt; 首先去 DNS 服务商添加一条指向服务器 IP 的 A 记录。&lt;/u &gt; 然后回到服务器，先切换 root 用户： sudo -i 。因为要使用 Certbot 和 Nginx，所以默认服务器上有这两个东西。 先获取证书，使用指令 sudo certbot --nginx 来获取证书，然后配置 Nginx。博主刚开始使用的是 firefish 的 Nginx 配置文件，但是没有成功，后来经热心网友建议，使用 Misskey 的配置文件试试，结果就成功了。 我的配置文件如下： # For WebSocketmap $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125; proxy_cache_path /tmp/nginx_cache_firefish levels=1:2 keys_zone=cache2:16m max_size=1g inactive=720m use_temp_path=off; server &#123; listen 80; listen [::]:80; server_name 你的域名; # For SSL domain validation root /var/www/html; location /.well-known/acme-challenge/ &#123; allow all; &#125; location /.well-known/pki-validation/ &#123; allow all; &#125; location / &#123; return 301 https://$server_name$request_uri; &#125;&#125; server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name 你的域名; ssl_session_timeout 1d; ssl_session_cache shared:ssl_session_cache:10m; ssl_session_tickets off; # To use Let's Encrypt certificate ssl_certificate /etc/letsencrypt/live/你的域名/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/你的域名/privkey.pem; # managed by Certbot # To use Debian/Ubuntu's self-signed certificate (For testing or before issuing a certificate) #ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem; #ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key; # SSL protocol settings ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_prefer_server_ciphers off; ssl_stapling on; ssl_stapling_verify on; # Change to your upload limit client_max_body_size 80m; # Proxy to Node location / &#123; proxy_pass http://127.0.0.1:6110; proxy_set_header Host $host; proxy_http_version 1.1; proxy_redirect off; # For WebSocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # Cache settings proxy_cache cache2; proxy_cache_lock on; proxy_cache_use_stale updating; proxy_force_ranges on; add_header X-Cache $upstream_cache_status; &#125;#1location =/robots.txt &#123;#2 default_type text/html;#3 add_header Content-Type \"text/plain; charset=UTF-8\";#4 return 200 \"User-agent: *\\nDisallow: /\\n\";#5&#125; &#125;注意： 我修改了缓存地址，否则会和原来 Misskey 的缓存地址冲突：proxy_cache_path /tmp/nginx_cache_firefish 将 cache1 改为了 cache2，共 2 处。 端口号要和 docker-compose.yml 和 default.yml 的一致。 需要修改 你的域名 ，共 4 处。 获取完证书和配置好 Nginx 文件之后，试着测试一下： nginx -t , 没有问题的话便是重载和重启 Nginx： nginx -s reloadsystemctl restart nginx（如果是第一次使用 Nginx 的话，不是 restart 而是 start） # 痛苦的排错之路 作为一个小白搭建实例免不了一路红灯 （说的就是 error 呜呜） ，总结了一下，出错原因要么是容器里的服务没有跑起来要么就是 Nginx 搞错了。 Docker 容器 首先 restart 一下容器： docker-compose restart ，这是解决 502 error 最好的办法 （大佬说的） 。 然后看看 docker ps 里面的服务是不是都 up 了。没有的话可能就是配置错了，回去改改配置，最后 docker-compose up -d 来更新容器。 实在不行，就通过 docker compose logs web -f --tail 100 来查看日志。 Nginx 反代 如果是 502 error 的话，如上所说先试试 docker-compose restart 。 如果不行或是其他错误，先用 nginx -t 看看是否成功，没有成功的话可能就是配置文件写错了，注意端口号等等。 test 没有问题的话，再看看 nginx 的 status： sudo systemctl status nginx 。 清理缓存，再用 service nginx reload 重载，然后 systemctl restart nginx 重启。 其他 可以用 curl -v http://localhost:端口号 看能不能拉取到信息。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"}]},{"title":"如何用统计软件进行简单的回归分析","slug":"如何用统计软件进行回归分析","date":"2023-05-02T06:38:26.496Z","updated":"2023-08-25T15:25:59.932Z","comments":true,"path":"2023/05/02/如何用统计软件进行回归分析/","link":"","permalink":"https://nanakumo.github.io/2023/05/02/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/","excerpt":"是极其潦草的学习笔记 w","text":"是极其潦草的学习笔记 w # Python 篇 # package 的准备 pandas statsmodels openpyxl # 读取文件 要指定好文件的路径 最好使用 names=['x','y'] 来指定说明变量和目标变量。 import pandas as pdfile_pass = r\"D:\\python\\data.xlsx\"df = pd.read_excel(file_pass, header=0, names=['cost', 'sales'])import statsmodels.formula.api as smfmodel = smf.ols('sales ~ cost', data=df)result = model.fit()print(result.summary())输出结果为： OLS Regression Results ==============================================================================Dep. Variable: sales R-squared: 1.000Model: OLS Adj. R-squared: 1.000Method: Least Squares F-statistic: 1.981e+31Date: Tue, 02 May 2023 Prob (F-statistic): 2.50e-47Time: 14:12:47 Log-Likelihood: 153.61No. Observations: 5 AIC: -303.2Df Residuals: 3 BIC: -304.0Df Model: 1 Covariance Type: nonrobust ============================================================================== coef std err t P>|t| [0.025 0.975]------------------------------------------------------------------------------Intercept 10.0000 1.49e-14 6.71e+14 0.000 10.000 10.000cost 2.0000 4.49e-16 4.45e+15 0.000 2.000 2.000==============================================================================Omnibus: nan Durbin-Watson: 0.667Prob(Omnibus): nan Jarque-Bera (JB): 0.375Skew: -0.344 Prob(JB): 0.829Kurtosis: 1.847 Cond. No. 77.8==============================================================================# Stata 篇 # 简单使用 Stata Log in import data save as use data use D:\\python\\data_回归分析.dtaregress 売上高万円 広告費** 注意：** 使用的数据文件一定是.dta 格式，&lt;u&gt; 而这个必须要先导入数据后保存再得到。&lt;/u&gt; 输出： -------------+---------------------------------- F(1, 3) = . Model | 4000 1 4000 Prob &gt; F = . Residual | 0 3 0 R-squared = 1.0000 -------------+---------------------------------- Adj R-squared = 1.0000 Total | 4000 4 1000 Root MSE = 0 ------------------------------------------------------------------------------ 売上高万円 | Coefficient Std. err. t P&gt;|t| [95% conf. interval] -------------+---------------------------------------------------------------- 広告費 | 2 . . . . . _cons | 10 . . . . . ------------------------------------------------------------------------------ # 附录 cost sales 10 30 20 50 30 70 40 90 50 110","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"}]},{"title":"零基础小白的博客搭建全记录（GitHub+Hexo）","slug":"博客搭建全记录","date":"2023-03-23T10:11:37.739Z","updated":"2023-08-25T16:16:34.145Z","comments":true,"path":"2023/03/23/博客搭建全记录/","link":"","permalink":"https://nanakumo.github.io/2023/03/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%AE%B0%E5%BD%95/","excerpt":"2023 年 3 月 23 日，小倖第一次成功通过 GitHub 搭好了 Hexo 的博客。兴奋之余，也想要将这场历时两天的艰辛记录下来。如您所见，小倖是小白，故这篇不是技术帖！！！（其实更像是小倖的碎碎念啦）","text":"2023 年 3 月 23 日，小倖第一次成功通过 GitHub 搭好了 Hexo 的博客。兴奋之余，也想要将这场历时两天的艰辛记录下来。如您所见，小倖是小白，故这篇不是技术帖！！！（其实更像是小倖的碎碎念啦） 小倖真是踩了好多坑。因为 Vercel（一个开箱即用的网站托管平台）已经没有了 Hexo 的框架，因此没有办法懒人建站法 —— 一键通过 Vercel 建站了。小倖在网上也找了很多博客搭建方法，尝试过的有： Cloudflare Pages Github Pages Wordpress Vercel 前两个是一直卡在网站发布上（即在本地查看没有问题，但无法在网页中显示）。Wordpress 是因为太笨重了遂放弃。小倖倒是通过 Vercel 建好了一个 Hugo 的博客，但如前言所说，Vercel 现在已经没有 Hexo 的框架了，因而在搭建 Hexo 博客上一直失败。 ** 补充：** 在网络上，通过 GitHub Pages 部署 Hexo 站点的办法大致分成两种。一种是将本地代码 Push 到远程仓后，在相应 Repo 的 Settings 中找到 Pages，部署是在那里完成的；另一种是通过 hexo d 命令来部署。前者小倖一直失败，后者倒是几乎毫无障碍地建成了，遂推荐。 （为什么小倖一定要一个 Hexo 的博客呢？还不是因为 Hexo Themes 有很多很好看的主题嘛。） 总之，小倖现在终于能够拥有一个可爱的博客啦，很开心☆*: .｡. o (≧▽≦) o .｡.:*☆☆*: .｡ # 博客搭建 # 1. 初识 Hexo Hexo 是友邻推荐给小倖的，小倖也经常在各个地方看到，当然最主要是主题很好看啦，遂采用。Hexo 对于小倖来说有如下几个优点： 发布方便 只需要在 Git Bash 中敲几行代码即可部署到 Github Pages 等平台上。 支持 Markdown 虽然几乎现在所有的平台都支持啦。 海量主题任君挑选 这才是最重要的嘛！ 总之，Hexo 最高！ # 2. 准备工作：环境布置 想要将通过 Hexo 布置站点，首先需要布置 Node.js 和 Git 环境。 这一步不难，只要进入各自的官网中下载就可以了。 Node.js 下载：https://nodejs.org/en/download Git 下载：https://git-scm.com/downloads 如何检验自己是否成功安装呢？可在 Git Bash 中输入如下命令： git versionnode -vnpm -v如果能够出现对应的版本号，则说明安装完成。接下来就可以进入 Hexo 的安装阶段啦。 # 3. 安装 Hexo 这一步也很简单，只需要敲入如下命令： npm install -g hexo-cli #安装 Hexohexo init &lt;文件夹名> #创建文件夹并初始化cd &lt;文件夹名> #进入该文件夹npm install #导入文件这样就会得到包含配置文件 _config.yml 的文件夹啦。你可以在该文件里个性化自己的网站。 其实这样就算建好了一个很简陋的站，如何查看自己的站到底长什么样子呢？可通过运行以下命令： #注意：都要在根目录下进行hexo cl #清理缓存hexo g #产生静态档案hexo s #启动服务器运行完之后，就可以通过 http://localhost:4000 来查看自己的站点啦。不过这时候只是在本地查看，还没有布置在网络上哦。因此接下来就是 —— # 4. 将 Hexo 博客部署到 Github Pages 上 在这一步中，你首先需要拥有一个 GitHub 账号，然后建一个 repo。这一步十分简单，就不多赘述了。建好 repo 之后，建议设置一个 SSH密钥 ，以便通过 SSH 连接 GitHub，而不必总是输入你的用户名和密码。 那么，接下来就试着运行以下代码吧： #首先，让你的笔记本电脑知道你将使用哪个 GitHub 账户git config --global user.name \"GitHub账户名\"git config --global user.email \"GitHub注册邮箱\"#产生一个 SSH 密钥对ssh-keygen -t rsa -C \"GitHub注册邮箱\"运行过程中，电脑会问你要将 SSH 密钥保存在哪个文件夹里，紧接着，你就可以在那个文件夹里看到 id_rsa.pub 这个文件啦。打开它，将内容复制到你的 GitHub 中。 具体方法：在 GitHub 的 settings 中找到 SSH and GPG keys ，打开它，然后新建一个 SSH Key，将剪切板的内容粘贴进去，就大功告成啦！ 在让你的笔记本知道你将使用哪个 GitHub 账户之后，还需要让你的 Hexo 站点知道你使用的是哪一个 repo 。操作方法就是打开网站的配置文件 _config.yml ，找到 deploy 行（一般是在最末），将其修改成以下内容： deploy: type: git repo: 你的仓库链接，通常的格式为https://github.com/账户名/仓库名.github.io.git branch: master &lt;!--swig￼0--> 不过，如果要使用 GitHub Pages，仓库名必须与账户名一致，详情见官方文档。 接下来，就是通过 hexo d 命令来将 Hexo 站点部署到 GitHub Pages 上啦，不过在此之前，需要下载一个 deploy tool 。请在你的 Git Bash 输入 npm install hexo-deployer-git --save 。安装完之后，再键入 hexo d 。恭喜你，你的站点能被大家访问了。 # 5. 博客装修 # 5.1 安装主题文件 如前文所说，目前这个站点还很简陋，因此就到了最激动人心的时刻 —— 网站装修！请尽情在 Hexo Themes 中寻找一款自己心水的主题吧。 具体的安装方法请详见各自主题文件夹中的 README.md 文件，一般步骤为：先将主题文件夹克隆至本地仓，然后修改网站配置文件 _config.yml 中的 theme 行: theme: your_theme 。 # 5.2 修改具体配置 如果你想个性化你的网站，请在主题文件中的 _config.yml 里修改吧。比如为你的网站增添 social link ，还可以为你的网站添加头像和背景图。 # 5.3 增加标签、目录等页面 如果你希望你的文章能够自动归档在对应的页面之下，大多数情况下是需要进行一些设置的。 一般而言，你的主题配置文件中应当是包含以下行的： menu: Home: name: house theme: solid link: / About: name: id-card theme: solid link: /about Archives: name: box-archive theme: solid link: /archives Categories: name: bookmark theme: solid link: /categories Tags: name: tags theme: solid link: /tags如果有的话，那就没有关系，没有的话，还需要自己添加。 接下来，就是替你的网站创建对应的页面，具体操作是在 Git Bash 中敲下： hexo new page tagshexo new page categorieshexo new page about接下来，你就会惊奇地发现，在 source 文件夹之下，不仅有了对应的文件夹，里面还各自都有 index.md 文件！请挨个打开它，然后在文件的最后一行填上 type: '' 。例如，在 tags 的 index.md 中应当填入以下内容： ---title: tagsdate: 2023-03-23 18:50:30type: 'tags'---设置好之后，只需要在你的文章中使用 Front-matter 就好啦。例如： --- title: 零基础小白的博客搭建全记录（GitHub+Hexo） categories: 今天敲点什么代码呢 tags: [博客,hexo,github] --- # 5.4 使用！-- more -- 让博客页面更简洁 由于很多主题的网页浏览都是直接全文显示的，这种时候会让你的网站显得笨重。那么 !-- more -- 就会将其变得简洁！可以参照这篇博文：https://www.jianshu.com/p/78c218f9d1e7 # 5.5 为你的博客开启评论功能吧 目前的评论的系统有很多，大概有： Gitalk Giscus Waline Twikoo 小倖使用的是 Giscus。可以直接在官方文档上面设置，不过有一些前提条件和准备工作： repo 必须是公开的。 安装 giscus app。 为你的 repo 启用 Discussions 功能。 一步一步跟着官方文档来，最后就会到达 启用giscus 这一步。你将会得到如下字段： src=\"https://giscus.app/client.js\" data-repo=\"[ENTER REPO HERE]\" data-repo-id=\"[ENTER REPO ID HERE]\" data-category=\"[ENTER CATEGORY NAME HERE]\" data-category-id=\"[ENTER CATEGORY ID HERE]\" data-mapping=\"pathname\" data-strict=\"0\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"bottom\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async>然后将其写入你的主题配置文件 _config.yml 中即可！小倖是这样写的： giscus: enable: true src: https://giscus.app/client.js repo: nanakumo/nanakumo.github.io repoID: category: categoryID: mapping: pathname strict: 0 reactionsEnabled: 1 emitMetadata: 0 inputPosition: bottom theme: cobalt lang: zh-CN# 写在最后的话 至此，你就可以享受你的博客之旅啦。请记住，每次在本地修改完之后，请一定要 hexo g &amp;&amp; hexo d 噢！","categories":[{"name":"一些有的没的","slug":"一些有的没的","permalink":"https://nanakumo.github.io/categories/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%9A%84%E6%B2%A1%E7%9A%84/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://nanakumo.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://nanakumo.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://nanakumo.github.io/tags/github/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"一些有的没的","slug":"一些有的没的","permalink":"https://nanakumo.github.io/categories/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%9A%84%E6%B2%A1%E7%9A%84/"}],"tags":[{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"},{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"},{"name":"博客","slug":"博客","permalink":"https://nanakumo.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://nanakumo.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://nanakumo.github.io/tags/github/"}]}