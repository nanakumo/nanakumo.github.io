{"meta":{"title":"この夏に🎇","subtitle":"甜品和猫，夏天和你。","description":"欢迎来到小倖的世界","author":"十条倖","url":"https://nanakumo.github.io","root":"/"},"pages":[{"title":"About","date":"2023-03-23T09:51:22.000Z","updated":"2023-03-23T20:20:21.415Z","comments":true,"path":"about/index.html","permalink":"https://nanakumo.github.io/about/index.html","excerpt":"","text":"# 欢迎来到十条倖的小窝🍦 姓名：十条倖 年龄： 实际年龄：6000 万年 人类年龄：24 周岁 经历：原本是一颗名叫 β Aquarii 的超巨星，因为爱上了恒星 Regulus 而失去自己的心脏，于是坠入 540 光年之外的地球。所以小倖现在正在地球上扮演一名正常人类。 时区：UTC+09:00 喜欢的：甜品和猫 在做的： 写小说 计算机入门 学经济的。研究方向：开发经济学、经济政策 联系方式 ： Matrix：https://matrix.to/#/@nanakumo:sakura.ci Mail：mailto:frrrsdsuud@duck.com # 这里会写些什么 可爱的日常 不擅长的计算机 苦逼的学术生活 # 最后的话 感谢你点进来 ——！ここまでご覧いただき誠にありがとうございます。"},{"title":"友情链接","date":"2023-08-25T14:16:10.605Z","updated":"2023-08-25T14:16:10.605Z","comments":true,"path":"friends/index.html","permalink":"https://nanakumo.github.io/friends/index.html","excerpt":"","text":"# 本站信息 站名： 小倖的窝 站长： 十条倖 地址： https://nanakumo.github.io 简介： 猫和甜品，夏天和你。 # 小伙伴们 凛子 夏天和你，我都要带走。 风儿姐姐 写诗画画码代码的。 诗音 人生沒有目的，只有過程，所謂的終極目的是虛無的。 Horace Young I like games, cooking, pixel arts, harmonica, and fediverse. Rikki wired person, trying to find myself."},{"title":"目录","date":"2023-03-23T09:49:44.000Z","updated":"2023-03-23T20:02:35.534Z","comments":true,"path":"categories/index.html","permalink":"https://nanakumo.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-23T09:50:30.000Z","updated":"2023-03-23T20:02:43.801Z","comments":true,"path":"tags/index.html","permalink":"https://nanakumo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Firefish | 菜鸟级别利用docker-compose搭建Fedi实例","slug":"菜鸟级别利用docker-compose搭建Firefish实例","date":"2023-08-24T12:49:19.316Z","updated":"2023-08-25T08:24:52.691Z","comments":true,"path":"2023/08/24/菜鸟级别利用docker-compose搭建Firefish实例/","link":"","permalink":"https://nanakumo.github.io/2023/08/24/%E8%8F%9C%E9%B8%9F%E7%BA%A7%E5%88%AB%E5%88%A9%E7%94%A8docker-compose%E6%90%AD%E5%BB%BAFirefish%E5%AE%9E%E4%BE%8B/","excerpt":"# 写在前面的话 2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。","text":"# 写在前面的话 2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。 # 搭建过程 因为是用 Docker-compose 搭建实例，所以默认机器上是有 Docker 容器的。在此基础上，先在任意目录下新建 docker-compose.yml 文件。比如: mkdir /firefish &amp;&amp; cd /firefishnano docker-compose.yml然后写入以下： version: \"3\"services: web: image: registry.joinfirefish.org/firefish/firefish container_name: firefish_web restart: unless-stopped depends_on: - db - redis### Uncomment one of the following to use a search engine# - meilisearch# - sonic ports: - \"3000:3000\" networks: - calcnet# - web environment: NODE_ENV: production volumes: - ./files:/firefish/files - ./.config:/firefish/.config:ro redis: restart: unless-stopped image: docker.io/redis:7.0-alpine container_name: firefish_redis networks: - calcnet volumes: - ./redis:/data db: restart: unless-stopped image: docker.io/postgres:12.2-alpine container_name: firefish_db networks: - calcnet env_file: - .config/docker.env volumes: - ./db:/var/lib/postgresql/data### Only one of the below should be used.### Meilisearch is better overall, but resource-intensive. Sonic is a very light full text search engine.# meilisearch:# container_name: meilisearch# image: getmeili/meilisearch:v1.1.1# environment:# - MEILI_ENV=$&#123;MEILI_ENV:-development&#125;# ports:# - \"7700:7700\"# networks:# - calcnet# volumes:# - ./meili_data:/meili_data# restart: unless-stopped# sonic:# restart: unless-stopped# image: docker.io/valeriansaliou/sonic:v1.4.0# networks:# - calcnet# volumes:# - ./sonic:/var/lib/sonic/store# - ./sonic/config.cfg:/etc/sonic.cfgnetworks: calcnet: # web: # external: # name: web 注意： 如果此前搭建过 Misskey 的话，那么端口号 3000 应当是冲突的，这时候需要把 web 下面的 ports 改成其他端口，比如 4000:4000 。 写完 docker-compose.yml 文件之后，需要在 firefish 的根目录下新建 .config 文件夹，在里头装入 default.yml 和 docker.env 这两个文件。 注意： 需要重命名：example.yml -&gt; default.yml &amp;&amp; docker_example.env -&gt; docker.env 修改 default.yml 的内容：url -&gt; 自己的域名 &amp;&amp; db localhost -&gt; firefish_db &amp;&amp; redis localhost -&gt; redis （备注：localhost 一定要修改，博主就是在这里卡了好久 QAQ） （可选）修改 default.yml 中的 port，如果端口有冲突的话。修改 db 的 user 和 pass，且两个文件一定要 match。 待文件写入完毕之后，便可使容器上线： docker-compose up -d # 反向代理：Nginx 这一部分的话，大概有很多种操作方法，我只写了我使用的一种：利用 Certbot 获取证书然后用 Nginx 反向代理。 &lt;u&gt; 首先去 DNS 服务商添加一条指向服务器 IP 的 A 记录。&lt;/u &gt; 然后回到服务器，先切换 root 用户： sudo -i 。因为要使用 Certbot 和 Nginx，所以默认服务器上有这两个东西。 先获取证书，使用指令 sudo certbot --nginx 来获取证书，然后配置 Nginx。博主刚开始使用的是 firefish 的 Nginx 配置文件，但是没有成功，后来经热心网友建议，使用 Misskey 的配置文件试试，结果就成功了。 我的配置文件如下： # For WebSocketmap $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125; proxy_cache_path /tmp/nginx_cache_firefish levels=1:2 keys_zone=cache2:16m max_size=1g inactive=720m use_temp_path=off; server &#123; listen 80; listen [::]:80; server_name 你的域名; # For SSL domain validation root /var/www/html; location /.well-known/acme-challenge/ &#123; allow all; &#125; location /.well-known/pki-validation/ &#123; allow all; &#125; location / &#123; return 301 https://$server_name$request_uri; &#125;&#125; server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name 你的域名; ssl_session_timeout 1d; ssl_session_cache shared:ssl_session_cache:10m; ssl_session_tickets off; # To use Let's Encrypt certificate ssl_certificate /etc/letsencrypt/live/你的域名/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/你的域名/privkey.pem; # managed by Certbot # To use Debian/Ubuntu's self-signed certificate (For testing or before issuing a certificate) #ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem; #ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key; # SSL protocol settings ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_prefer_server_ciphers off; ssl_stapling on; ssl_stapling_verify on; # Change to your upload limit client_max_body_size 80m; # Proxy to Node location / &#123; proxy_pass http://127.0.0.1:6110; proxy_set_header Host $host; proxy_http_version 1.1; proxy_redirect off; # For WebSocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # Cache settings proxy_cache cache2; proxy_cache_lock on; proxy_cache_use_stale updating; proxy_force_ranges on; add_header X-Cache $upstream_cache_status; &#125;#1location =/robots.txt &#123;#2 default_type text/html;#3 add_header Content-Type \"text/plain; charset=UTF-8\";#4 return 200 \"User-agent: *\\nDisallow: /\\n\";#5&#125; &#125;注意： 我修改了缓存地址，否则会和原来 Misskey 的缓存地址冲突：proxy_cache_path /tmp/nginx_cache_firefish 将 cache1 改为了 cache2，共 2 处。 端口号要和 docker-compose.yml 和 default.yml 的一致。 需要修改 你的域名 ，共 4 处。 获取完证书和配置好 Nginx 文件之后，试着测试一下： nginx -t , 没有问题的话便是重载和重启 Nginx： nginx -s reloadsystemctl restart nginx（如果是第一次使用 Nginx 的话，不是 restart 而是 start） # 痛苦的排错之路 作为一个小白搭建实例免不了一路红灯 （说的就是 error 呜呜） ，总结了一下，出错原因要么是容器里的服务没有跑起来要么就是 Nginx 搞错了。 Docker 容器 首先 restart 一下容器： docker-compose restart ，这是解决 502 error 最好的办法 （大佬说的） 。 然后看看 docker ps 里面的服务是不是都 up 了。没有的话可能就是配置错了，回去改改配置，最后 docker-compose up -d 来更新容器。 实在不行，就通过 docker compose logs web -f --tail 100 来查看日志。 Nginx 反代 如果是 502 error 的话，如上所说先试试 docker-compose restart 。 如果不行或是其他错误，先用 nginx -t 看看是否成功，没有成功的话可能就是配置文件写错了，注意端口号等等。 test 没有问题的话，再看看 nginx 的 status： sudo systemctl status nginx 。 清理缓存，再用 service nginx reload 重载，然后 systemctl restart nginx 重启。 其他 可以用 curl -v http://localhost:端口号 看能不能拉取到信息。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"}]},{"title":"如何用统计软件进行简单的回归分析","slug":"如何用统计软件进行回归分析","date":"2023-05-02T06:38:26.496Z","updated":"2023-08-21T10:50:25.192Z","comments":true,"path":"2023/05/02/如何用统计软件进行回归分析/","link":"","permalink":"https://nanakumo.github.io/2023/05/02/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/","excerpt":"# Python 篇 # package 的准备 pandas statsmodels openpyxl","text":"# Python 篇 # package 的准备 pandas statsmodels openpyxl # 读取文件 要指定好文件的路径 最好使用 names=['x','y'] 来指定说明变量和目标变量。 import pandas as pdfile_pass = r\"D:\\python\\data.xlsx\"df = pd.read_excel(file_pass, header=0, names=['cost', 'sales'])import statsmodels.formula.api as smfmodel = smf.ols('sales ~ cost', data=df)result = model.fit()print(result.summary())输出结果为： OLS Regression Results ==============================================================================Dep. Variable: sales R-squared: 1.000Model: OLS Adj. R-squared: 1.000Method: Least Squares F-statistic: 1.981e+31Date: Tue, 02 May 2023 Prob (F-statistic): 2.50e-47Time: 14:12:47 Log-Likelihood: 153.61No. Observations: 5 AIC: -303.2Df Residuals: 3 BIC: -304.0Df Model: 1 Covariance Type: nonrobust ============================================================================== coef std err t P>|t| [0.025 0.975]------------------------------------------------------------------------------Intercept 10.0000 1.49e-14 6.71e+14 0.000 10.000 10.000cost 2.0000 4.49e-16 4.45e+15 0.000 2.000 2.000==============================================================================Omnibus: nan Durbin-Watson: 0.667Prob(Omnibus): nan Jarque-Bera (JB): 0.375Skew: -0.344 Prob(JB): 0.829Kurtosis: 1.847 Cond. No. 77.8==============================================================================# Stata 篇 # 简单使用 Stata Log in import data save as use data use D:\\python\\data_回归分析.dtaregress 売上高万円 広告費** 注意：** 使用的数据文件一定是.dta 格式，&lt;u&gt; 而这个必须要先导入数据后保存再得到。&lt;/u&gt; 输出： -------------+---------------------------------- F(1, 3) = . Model | 4000 1 4000 Prob &gt; F = . Residual | 0 3 0 R-squared = 1.0000 -------------+---------------------------------- Adj R-squared = 1.0000 Total | 4000 4 1000 Root MSE = 0 ------------------------------------------------------------------------------ 売上高万円 | Coefficient Std. err. t P&gt;|t| [95% conf. interval] -------------+---------------------------------------------------------------- 広告費 | 2 . . . . . _cons | 10 . . . . . ------------------------------------------------------------------------------ # 附录 cost sales 10 30 20 50 30 70 40 90 50 110","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://nanakumo.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"},{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"}]}