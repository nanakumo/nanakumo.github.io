{"meta":{"title":"この夏に🎇","subtitle":"猫和甜品，夏天和你。","description":"让我们在光明的世界相遇。","author":"十条倖","url":"https://nanakumo.github.io","root":"/"},"pages":[{"title":"About","date":"2023-03-23T09:51:22.000Z","updated":"2023-08-26T04:46:39.390Z","comments":true,"path":"about/index.html","permalink":"https://nanakumo.github.io/about/index.html","excerpt":"","text":"# 欢迎来到十条倖的小窝🍦 姓名：十条倖 年龄： 实际年龄：6000 万年 人类年龄：24 周岁 经历：原本是一颗名叫 β Aquarii 的超巨星，因为爱上了恒星 Regulus 而失去自己的心脏，于是坠入 540 光年之外的地球。所以小倖现在正在地球上扮演一名正常人类。 时区：UTC+09:00 喜欢的：甜品和猫 在做的： 写小说 计算机入门 学经济的。研究方向：因果推论，数据分析，经济政策。 联系方式 ： Matrix: https://matrix.to/#/@frrr:nya.one Telegramd: https://t.me/suud_2022 # 这里会写些什么 可爱的日常 不擅长的计算机 苦逼的学术生活 # 最后的话 感谢你点进来 ——！点进来我们就算是朋友了喵 ——"},{"title":"说说","date":"2023-08-25T18:58:52.000Z","updated":"2023-08-25T18:59:29.161Z","comments":true,"path":"essays/index.html","permalink":"https://nanakumo.github.io/essays/index.html","excerpt":"","text":""},{"title":"目录","date":"2023-03-23T09:49:44.000Z","updated":"2023-03-23T20:02:35.534Z","comments":true,"path":"categories/index.html","permalink":"https://nanakumo.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-08-26T04:29:38.362Z","updated":"2023-08-26T04:29:38.362Z","comments":true,"path":"friends/index.html","permalink":"https://nanakumo.github.io/friends/index.html","excerpt":"","text":"# 本站信息 站名： 小倖的窝 站长： 十条倖 地址： https://nanakumo.github.io 简介： 猫和甜品，夏天和你。 # 小伙伴们 凛子 夏天和你，我都要带走。 风儿姐姐 是猫娘萝莉~ 詩音 可能只是一隻貓，或是貓娘。 Horace Young I like games, cooking, pixel arts, harmonica, and fediverse. Rikki wired person, trying to find myself."},{"title":"标签","date":"2023-03-23T09:50:30.000Z","updated":"2023-03-23T20:02:43.801Z","comments":true,"path":"tags/index.html","permalink":"https://nanakumo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"WASTED LOVE","slug":"WASTED LOVE","date":"2023-08-28T14:37:38.604Z","updated":"2023-08-28T23:09:25.061Z","comments":true,"path":"2023/08/28/WASTED LOVE/","link":"","permalink":"https://nanakumo.github.io/2023/08/28/WASTED%20LOVE/","excerpt":"喵喵喵！歌词翻译 3 回目！这次挑战一下小黄歌喵～ 依旧随心所欲的意译预警喵喵喵！","text":"喵喵喵！歌词翻译 3 回目！这次挑战一下小黄歌喵～ 依旧随心所欲的意译预警喵喵喵！ # 前言 是饭民工系时听过的歌。别说了，我现在网盘里都还有登坂広臣的高清果照喵喵喵！ # 视频 以前翻译过的歌也放在了列表里 # 歌词翻译 『WASTED LOVE』登坂広臣 废弃之爱 Talking like that… We're gonna fall 我们耳鬓厮磨… 我们会一起坠落 Talking like that, talking like that… 我们耳鬓厮磨 我们诉说爱意… I don't know when it all started 我不知道我们时候开始的 いつの間にかこうして 不知不觉就变成了这样 Guided by my own beating heart 由我自己的心跳引导的 鼓動の赴くまま 跟随着心脏跳动 何度も you said you loved me 无数次 你说你爱我 このまま have the time of my life 像这样 度过了我人生中最好的时光 二人でいる時間は 两个人在一起的时间 I've never felt this way in my life oh 是独一无二的日子 ふと目が合ったあの時から 从我们视线交汇的那一刻起 物語は始まっていた 我们的故事就拉开了序幕 I could be free (yeah) I want to stay 我会是自由的（是的）我想留在你身边 Talking like that 我们耳鬓厮磨 We got it fallin', talking like that 我们急速堕落 我们耳鬓厮磨 We got it fallin', talking like that 我们堕入深渊 我们诉说爱意 'Cuz we are like that uuh uh uh 因为我们就是像那样 Talking like that 耳鬓厮磨的 I would do it over again 我会再来一次 もし君さえ良かったら 如果你愿意的话 No matter what happens to us 不管发生什么 心に感じるまま 都跟随心的感受 何度も Made love together 无次数 我们在床上缠绵 解ってる staring into your eyes 我明白 当我望向了你的眼睛 この気持ちを知ったら 当我知道了这样的感觉之后 There is no way I am turning back oh 就再无退路 その手に触れたあの時から 从触碰你手的那一刻起 言葉もなく夢中になった 语言变得苍白 我爱上了你 I could be free (yeah), I want to stay 我会是自由的（是的）我想留在你身边 Talking like that 我们耳鬓厮磨 We got it fallin', talking like that 我们急速堕落 我们耳鬓厮磨 We got it fallin', talking like that 我们堕入深渊 我们诉说爱意 'Cuz we are like that uuh uh uh 因为我们就是像那样 Talking like that 耳鬓厮磨的 Ah ゆっくり激しく抱きしめ全て忘れ 啊 慢慢地激烈相拥 然后忘掉一切 夜に溶けていく I can't get enough 融入夜色 但我不能满足 yea yea yea このままずっと fallen 耶 耶 耶 像这样一直堕落 ふと目が合ったあの時から 从我们视线交汇的那一刻起 物語は始まっていた 我们的故事就拉开了序幕 I could be free (yeah) I want to stay 我会是自由的（是的）我想留在你身边 Talking like that 我们耳鬓厮磨 We got it fallin', talking like that 我们急速堕落 我们耳鬓厮磨 We got it fallin', talking like that 我们堕入深渊 我们诉说爱意 'Cuz we are like that uuh uh uh 因为我们就是像那样 Talking like that 耳鬓厮磨的","categories":[{"name":"歌词翻译","slug":"translate","permalink":"https://nanakumo.github.io/categories/translate/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://nanakumo.github.io/tags/%E6%97%A5%E8%AF%AD/"},{"name":"歌词，民工系","slug":"歌词，民工系","permalink":"https://nanakumo.github.io/tags/%E6%AD%8C%E8%AF%8D%EF%BC%8C%E6%B0%91%E5%B7%A5%E7%B3%BB/"}]},{"title":"晴ときどき曇","slug":"晴ときどき曇","date":"2023-08-27T02:09:27.989Z","updated":"2023-08-27T03:33:45.587Z","comments":true,"path":"2023/08/27/晴ときどき曇/","link":"","permalink":"https://nanakumo.github.io/2023/08/27/%E6%99%B4%E3%81%A8%E3%81%8D%E3%81%A9%E3%81%8D%E6%9B%87/","excerpt":"","text":"歌词翻译 2 回目喵！依旧是带着自我感情的意译喵喵喵！ # 前言 这是我两年前 loop 过的一首歌，曾经无数次治愈了迷茫又疲惫的我。 「做不到而逃走也能被获救的话，那样的未来我才不需要」， 这句歌词直击了我的心扉久久不止。 「哭泣着笑着后悔着，恋爱着失落着生活着」， 听着这样的歌词，就会想，是啊，生活就是这样的啊，有眼泪也有欢笑，这么想着，就会觉得所有困难的时候都能跨越过去了。大概每一首歌里，都会有一段无法忘怀的记忆吧，偶尔会想起 loop 这首歌的日子：有朋友，有爱好，有汗水，有生活。这是我人生旅途中再宝贵不过的时光了。 那样美好的时光，还能复刻吗？ # 视频 以前翻译过的歌也放在了列表里喵 # 歌词翻译 『晴ときどき曇』 晴朗，时而多云 「いい天気だね」 你说，今天天气真好呢 君が言うから「本当だね」と答える 我笑道，确实是这样呢 今日の空のこと話題にしたなら心がふっと近くなる 一边谈论着这样的话题 心也一下子靠在了一起 歩道を歩く 所々で水たまりが邪魔する 走在人行道上 到处都有碍事的水洼 君と手を繋いで飛び越えてみる 太陽の光が舞う 我牵着你的手跳了过去 阳光在起舞 次の季節が香り始める 下个季节即将开始绽放 その変化に抗うように （太阳）为了违逆那样的变化 “暑かった日々を忘れないで” と最後の力 振り絞って照らす 竭尽全力大声呼喊着 “不要忘记炎炎夏日噢”，然后照耀着 空は見上げるたびそっと 色や模様うつり変わって 每当仰望天空 颜色和模样都在风云变幻 それはもう僕らの毎日のようだね 那简直就像是我们的每一天呢 繰り返さないからもっと この日この時この瞬間 因为那样的时刻没有办法复制 所以当下的此时此刻 思い上がらずに刻みつけていたいよ 都想小心翼翼地刻在心底呢 宇宙まですぐ届く高さで泳いでいる魚たち 鱼儿们在能够得着宇宙的高度遨游着 そういえば昨日は鈍色の空 どこに潜っていたんだろう？ 说起来 昨日的它们又潜藏在哪里的钝色天空之下呢？ 激しい雨にも耐えぬいた木の葉 无法忍受大雨的树叶们 へっちゃらな顔で伝えている 不屈地想表达些什么 やりきれないと逃げ出すことで救われるくらいなら 做不到而逃走也能被获救的话 そんな未来は必要 (いら) ない 那样的未来我才不需要 今日も誰かが空の下 泣いて笑って悔しがって 今天也有人在天空之下 哭泣着笑着后悔着 恋したり落ち込んだりして暮らしている 恋爱着失落着生活着 満たされない何かがあって得られる喜びがあると思う 无法得到满足 但是一定有什么能得到的喜悦 少なくとも、今の僕はそうだよ 至少 如今的我是那样坚信的噢 君が僕の方を振り返って その思草 (しぐさ) がたまらなくて 你回头看向了我 那样的动作印在了我的脑海里 幸せはいつもそうやって傍にいる 幸福就像这样一直在我的身边 移り変わっていく空の下 僕らいつまでもこの瞬間 在风云变幻的天空之下 我们要永远像此刻这般 抱きしめながら ふたり歩いていこう 两个人拥抱着 一起迈向未来吧","categories":[{"name":"歌词翻译","slug":"translate","permalink":"https://nanakumo.github.io/categories/translate/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://nanakumo.github.io/tags/%E6%97%A5%E8%AF%AD/"},{"name":"歌词","slug":"歌词","permalink":"https://nanakumo.github.io/tags/%E6%AD%8C%E8%AF%8D/"}]},{"title":"語るなら未来を･･･","slug":"語るなら未来を･･･","date":"2023-08-26T14:27:34.963Z","updated":"2023-08-26T17:45:08.837Z","comments":true,"path":"2023/08/26/語るなら未来を･･･/","link":"","permalink":"https://nanakumo.github.io/2023/08/26/%E8%AA%9E%E3%82%8B%E3%81%AA%E3%82%89%E6%9C%AA%E6%9D%A5%E3%82%92%EF%BD%A5%EF%BD%A5%EF%BD%A5/","excerpt":"这是博主时隔一年多第一次翻译日语，稍稍有点手生，但是因为以前翻译过漫画，所以一下子又能找到感觉 (大概) 然后因为这是自己翻译着玩的，所以不保证质量 orz 再加上博主是意译派，还时不时加入自己的感情，所以 ——","text":"这是博主时隔一年多第一次翻译日语，稍稍有点手生，但是因为以前翻译过漫画，所以一下子又能找到感觉 (大概) 然后因为这是自己翻译着玩的，所以不保证质量 orz 再加上博主是意译派，还时不时加入自己的感情，所以 —— # 前言 『語るなら未来を･･･』 是 欅坂 46 在 2016.8.10 发行的第二张单曲里的歌，而我是今年在玩音游ユニゾンエアー时才第一次听到。朗朗上口的曲调瞬间抓耳，标题也很喜欢，再加之我是一个比起过去更看重当下和未来的人，所以立刻就与歌词所传达出来的想法产生了共鸣。然后歌词里有一句是「把那些带到坟墓里去吧」，作为坟墓爱好者（咦？）就更喜欢这首歌了啊 wwwww（喂你在说什么啊 —— # 视频 # 歌词翻译 『語るなら未来を･･･』 如果要诉说的话，那就诉说未来吧･･･ ふいだった 不经意之间 ただのアンラッキー 只不过是不走运而已 心が一瞬声上げた 心里就一瞬间大声呼喊 ガラス瓶 玻璃瓶 落として割れたら 如果掉落而碎了的话 元になんて戻せないんだ 就没有办法再复原了啊 何が入ってたかなんて 即便弄清楚了里面装了些什么 明かしても意味がない 也毫无意义 アスファルトの上 在泊油路上 広がった 蔓延开来的 ただの黒い染み 只不过是无尽的黑色 もう 失った人生なんて語るな 不要再 诉说已经失去的人生了 ほんの一部でしかないんだ 那只不过是你生活的一部分而已 手に入れたのは脆 (もろ) い現実と 我们能够拥有的只不过是 飾られた嘘のレッテル 脆弱的现实和被装饰成谎言的标签 破片 (かけら) を拾い集めるな 即使是那些碎片也不要拾起来啊 語るなら 未来を… 如果要诉说的话 就去诉说未来吧… 終わったんだ 已经结束了啊 無駄なエピローグ 这无用的结语 往生際が悪すぎる 对于这个故事太过执着了 手に取って 即便是得到之后 確かめようにも 想要去确认什么 そこにないならしょうがない 如果不在那里的话也没有办法呢 誰のせいでもないだろう 谁都没有错吧 振り返る余裕ない 没有回顾过去的余力 腹立たしさとか 曾经所气愤的事之类的 悔しさは 还有后悔什么的 思い上がりだよ 如今也能当作是自豪的存在了 今だから言えることは語るな 不要说一些事到如今才可以说的话了 墓の中まで持って行け 把那些带到坟墓里去吧 言葉にすれば安い願望と 如果要说的话 就说一些能够实现的愿望 オーバーに盛った真実 和无比盛大的真实 過去など自己嫌悪しかない 过去什么的 只会自我厌弃 語るなら 予言を… 要说的话 就去说预言吧… 人は心の中に 每个人的心中 ガラスの瓶がある 都有一个玻璃瓶 愛や夢を詰め込んで 里面装载着爱与梦想 割らぬように大事に 我们都小心翼翼地 守っているけれど… 不去打碎它… もう 失った人生なんて語るな 不要再 诉说已经失去的人生了 ほんの一部でしかないんだ 那只不过是你生活的一部分而已 手に入れたのは脆 (もろ) い現実と 我们能够拥有的只不过是 飾られた嘘のレッテル 脆弱的现实和被装饰成谎言的标签 破片 (かけら) を拾い集めるな 即使是那些碎片也不要拾起来啊 語るなら 未来を… 如果要诉说的话，就去诉说未来吧… 今だから言えることは語るな 不要说一些事到如今才可以说的话了 墓の中まで持って行け 把那些带到坟墓里去吧 言葉にすれば安い願望と 如果要说的话 就说一些能够实现的愿望 オーバーに盛った真実 和无比盛大的真实 過去など自己嫌悪しかない 过去什么的 只会自我厌弃 語るなら 予言を… 要说的话 就去说预言吧…","categories":[{"name":"歌词翻译","slug":"translate","permalink":"https://nanakumo.github.io/categories/translate/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://nanakumo.github.io/tags/%E6%97%A5%E8%AF%AD/"},{"name":"歌词","slug":"歌词","permalink":"https://nanakumo.github.io/tags/%E6%AD%8C%E8%AF%8D/"},{"name":"坂道系","slug":"坂道系","permalink":"https://nanakumo.github.io/tags/%E5%9D%82%E9%81%93%E7%B3%BB/"}]},{"title":"数据分析 | 因果推论 / 効果検証入門（更新于2023/8/27）","slug":"效果检测入门","date":"2023-08-26T13:06:23.272Z","updated":"2023-08-27T11:52:15.586Z","comments":true,"path":"2023/08/26/效果检测入门/","link":"","permalink":"https://nanakumo.github.io/2023/08/26/%E6%95%88%E6%9E%9C%E6%A3%80%E6%B5%8B%E5%85%A5%E9%97%A8/","excerpt":"这是我的阅读笔记喵 (。・ω・。) 因为还没有读完，所以会随时更新噢 ww （少量日文出没，有些实在不知道中文的讲法 QAQ）","text":"这是我的阅读笔记喵 (。・ω・。) 因为还没有读完，所以会随时更新噢 ww （少量日文出没，有些实在不知道中文的讲法 QAQ） 点我点我 书名：効果検証入門～正しい比較のための因果推論 / 計量経済学の基礎～ 分类：经济学 / 数据分析 / 因果推论 著者：安井翔太 出版社：技术评论社 # selection bias 和 RCT # 什么是 selection bias # 效果 假定一个场景： 某便利店为了一个新商品进行了广告宣传，于是这个新商品的销量比以往的新商品销量都要好。 在我们分析之前，首先对一些名词作出解释： 效果： 在这个案例里便是销量。 介入 / 処置： 在这个案例里面就是广告宣传，若是政策分析的话，也能叫做施策。 回到这个例子，单单是看这句话的描述的话，似乎是因为有了广告宣传，所以这一次的新商品销量比以往都要好。也就是说，广告宣传是原因，而销量变好是结果。但很显然不是这样的，因为我们没有办法排除其他因素的干扰， 比如： 服务质量的提升 同一时期还有其他的活动 发布优惠券 与他社的联动 如果忽视了其他因素而单单得出因为有了广告宣传而使得销量提升了这样简单的结论的话，很有可能会导致下一次进行同样的广告宣传但却根本没有达到预期这样的后果，也就是所谓的失算了（专业点来说就是决策失误）。 # 潜在购买量的差 为了说明什么是潜在购买量，我们重新假定一个场景： 某购物网站想要通过发送邮件（邮件内部有优惠券的附件）来增加商品销量。 在这个场景下，假设用户 A 是该购物网站的常客。于是我们能拿到两个数据，一个是用户 A 在邮件发送之前在一定时期之内的购买量，一个便是邮件发布之后在一定时间之内的购买量。 在这个案例里面，第一个数据就是潜在购买量。 在大多数的商业决策中，我们常常依赖这样的数据分析。但是值得警惕的是，单纯这样分析是非常不妥的。 # 错误的决策 在说明问题之前，我们先看看整个事件是如何发生的。 也就是说，网站用户大概是分成两类，一类是原本就要购买商品的用户，另一类则是原本就不买商品的用户。而在一般的商业决策中，商家往往会向前者发送带有优惠券的邮件。更具体来讲，用户被选择发送邮件需要看是否满足以下三个条件： 过去的购买量是否到达了一定的数值 最近是否有购买 买过和优惠券一样的商品吗 如果满足了其中一样，商家便会选择向他们发送邮件。也就是说，没有被选择发送邮件的用户的潜在购买量原本就比被选择了发送邮件的用户的要少。因此单纯比较发送邮件之后两者购买量之差的话则会存在 selection bias. 像这样，由数据得到的分析结果与实际的效果之间的差便称作 bias，其中由于比较对象之间的潜在不同而产生的 bias 就叫做 selection bias. # RCT(Randomized Controlled Trail) 到目前为止，想要排除掉其他因素的影响，最好的做法是进行 RCT 实验。 # 真正的「效果」和理想的检验方法 其实最理想的检验方法是，比较两个完全相同的样本。就拿刚刚的例子来说，首先对用户 A 发送邮件拿到用户 A 的购买量之后，再坐时光机器回去在同一个时间节点上不再发送邮件，拿到没有发送邮件的数据。 但是利用目前的科学技术显然是不可能的，因此这就成为了因果推论的根本问题。 因果推论的根本问题是，在比较同一对象在「被介入」与「没有被介入」后的状态是否相同时，因为同个时间点没办法既是「介入」又是「未介入」，所以这个是没办法实现的。 # RCT 检验 既然没办法达到最理想的效果，那么我们只能退而求其次，选择一个相对而言最能信赖的方法，即将介入随机化， 也就是随机选择介入对象。 我们可以认为，从平均水平来看，「被介入对象」和「未被介入对象」除了有无配信邮件以外其他方面都是一样的。我们可以通过这样来排除掉其他因素的影响。这样的数据分析的方法便叫作 RCT (Randomized Controlled Trail). 另外，在一些高度数据科学（data science）的公司或机构又将 RCT 叫做 AB test. # 检验效果的理想方法 到此为止，我们说明了什么是效果和 RCT，接下来我们会使用数学公式对此进行整理。 # 母集団和推定 观测数据的背后潜在的所有能观测到的数据称为母集団（不太清楚中文的讲法）。但是我们没有办法收集到所有的数据，所以只能分析手里头有的数据，这个过程叫做推定。但是值得注意的是，我们想要通过推定来知道母集団的某一个特征，而其他特征作为干扰项是需要被我们排除在外的。 # Potential outcome framwork 我们首先考虑母集团的效果。假定有某个样本（按照上面的例子的话就是用户 A）i，设 ZiZ_iZi​ 为是否配信邮件，其中 Z1Z_1Z1​ 为配信邮件，Z0Z_0Z0​ 为不配信邮件，如下： Zi={10 Z_i=\\left\\{ \\begin{aligned} 1 \\\\ 0 \\end{aligned} \\right.Zi​={10​ 接下来，我们有假定 YiY_iYi​ 为介入（或没有介入）之后的购买量，其中 Yi0Y_i^0Yi0​ 表示没有邮件配信时的购买量，而 Yi1Y_i^1Yi1​ 则表示邮件配信之后的购买量。如下： Yi={Yi1——Zi=1Yi0——Zi=0 Y_i=\\left\\{ \\begin{aligned} Y_i^1 —— Z_i = 1\\\\ Y_i^0 —— Z_i = 0 \\end{aligned} \\right. Yi​={Yi1​——Zi​=1Yi0​——Zi​=0​ 因此，整体的效果可以通过以下算式来表现： Yi=Yi0(1−Zi)+Yi1ZiY_i = Y_i^0(1-Z_i) + Y_i^1Z_iYi​=Yi0​(1−Zi​)+Yi1​Zi​ 像这样，我们认为对于每个样本（用户 A）来说，介入和没有被介入的差值（即 Yi0Y_i^0Yi0​ 和 Yi1Y_i^1Yi1​）便是 potential Outcome Framwork. # 基于 potential outcome framwork 的介入效果的推定 现在假定一组数据，如下表： 第 i 行就是用户 i 用户 i 的购买量是 Y Yi0Y_i^0Yi0​ 指不配信邮件时的购买量， Yi1Y_i^1Yi1​ 指配信邮件时的购买量 是否配信邮件用 Z 来表示 表 1.1 用户的购买量（拟定数据） i Y Yi0Y_i^0Yi0​ Yi1Y_i^1Yi1​ Z 1 300 300 400 0 2 600 500 600 1 3 600 500 600 1 4 300 300 400 0 5 300 300 400 0 6 600 500 600 1 7 600 500 600 1 8 300 300 400 0 7 600 500 600 1 10 300 300 400 0 由前述所说得知，效果便是 Yi1Y_i^1Yi1​ 与 Yi0Y_i^0Yi0​ 之间的差值，因此上表的所有用户的效果都为 100，即配信了邮件之后，购买量会比没有配信邮件时多出 100. 因此，介入效果（τ，读作たう）可以通过以下算式来表示： τ=Yi−Y0τ = Y^i - Y^0τ=Yi−Y0 但是值得我们注意的是，我们能够得观测到的数据只有 Y 和 Z ，因此我们无法算出想要的 τ 值。所以，我们不是着眼于Yi1Y_i^1Yi1​ 与Yi0Y_i^0Yi0​ ，而是去比较配信的群体和没有被配信的群体，然后去考虑平均效果。 (未完待续，更新于 2023/8/27)","categories":[{"name":"学习笔记","slug":"notes","permalink":"https://nanakumo.github.io/categories/notes/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://nanakumo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"因果推论","slug":"因果推论","permalink":"https://nanakumo.github.io/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E8%AE%BA/"},{"name":"计量经济学","slug":"计量经济学","permalink":"https://nanakumo.github.io/tags/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6/"},{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://nanakumo.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"}]},{"title":"Firefish | 菜鸟级别利用docker-compose搭建Fedi实例","slug":"菜鸟级别利用docker-compose搭建Firefish实例","date":"2023-08-24T12:49:19.316Z","updated":"2023-08-27T06:49:06.685Z","comments":true,"path":"2023/08/24/菜鸟级别利用docker-compose搭建Firefish实例/","link":"","permalink":"https://nanakumo.github.io/2023/08/24/%E8%8F%9C%E9%B8%9F%E7%BA%A7%E5%88%AB%E5%88%A9%E7%94%A8docker-compose%E6%90%AD%E5%BB%BAFirefish%E5%AE%9E%E4%BE%8B/","excerpt":"2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。","text":"2023 年，随着 X 社媒（原 Twitter）的全面塌陷，越来越多的网友逃向了 Fediverse 开源社交平台，其中著名的有 Mastodon、Misskey 和 Pleroma。前阵子，随着 Firefish 的 横空问世 （Misskey 的一个 fork），博主便也想着搭一个玩玩。博主是计算机零基础的小白 （超级白的那种） ，靠着广大热心网友先后搭起了一个 Misskey 实例和一个 Pleroma 实例，这一次，也多亏了大家的帮忙，磕磕绊绊地终于搭好了 Firefish 实例。趁着记忆还鲜明，赶紧记录一下搭建过程。 # 搭建过程 因为是用 Docker-compose 搭建实例，所以默认机器上是有 Docker 容器的。在此基础上，先在任意目录下新建 docker-compose.yml 文件。比如: mkdir /firefish &amp;&amp; cd /firefishnano docker-compose.yml然后写入以下： version: \"3\"services: web: image: registry.joinfirefish.org/firefish/firefish container_name: firefish_web restart: unless-stopped depends_on: - db - redis### Uncomment one of the following to use a search engine# - meilisearch# - sonic ports: - \"3000:3000\" networks: - calcnet# - web environment: NODE_ENV: production volumes: - ./files:/firefish/files - ./.config:/firefish/.config:ro redis: restart: unless-stopped image: docker.io/redis:7.0-alpine container_name: firefish_redis networks: - calcnet volumes: - ./redis:/data db: restart: unless-stopped image: docker.io/postgres:12.2-alpine container_name: firefish_db networks: - calcnet env_file: - .config/docker.env volumes: - ./db:/var/lib/postgresql/data### Only one of the below should be used.### Meilisearch is better overall, but resource-intensive. Sonic is a very light full text search engine.# meilisearch:# container_name: meilisearch# image: getmeili/meilisearch:v1.1.1# environment:# - MEILI_ENV=$&#123;MEILI_ENV:-development&#125;# ports:# - \"7700:7700\"# networks:# - calcnet# volumes:# - ./meili_data:/meili_data# restart: unless-stopped# sonic:# restart: unless-stopped# image: docker.io/valeriansaliou/sonic:v1.4.0# networks:# - calcnet# volumes:# - ./sonic:/var/lib/sonic/store# - ./sonic/config.cfg:/etc/sonic.cfgnetworks: calcnet: # web: # external: # name: web 注意： 如果此前搭建过 Misskey 的话，那么端口号 3000 应当是冲突的，这时候需要把 web 下面的 ports 改成其他端口，比如 4000:4000 。 写完 docker-compose.yml 文件之后，需要在 firefish 的根目录下新建 .config 文件夹，在里头装入 default.yml 和 docker.env 这两个文件。 注意： 需要重命名：example.yml -&gt; default.yml &amp;&amp; docker_example.env -&gt; docker.env 修改 default.yml 的内容：url -&gt; 自己的域名 &amp;&amp; db localhost -&gt; firefish_db &amp;&amp; redis localhost -&gt; redis （备注：localhost 一定要修改，博主就是在这里卡了好久 QAQ） （可选）修改 default.yml 中的 port，如果端口有冲突的话。修改 db 的 user 和 pass，且两个文件一定要 match。 待文件写入完毕之后，便可使容器上线： docker-compose up -d # 反向代理：Nginx 这一部分的话，大概有很多种操作方法，我只写了我使用的一种：利用 Certbot 获取证书然后用 Nginx 反向代理。 首先去 DNS 服务商添加一条指向服务器 IP 的 A 记录。 然后回到服务器，先切换 root 用户： sudo -i 。因为要使用 Certbot 和 Nginx，所以默认服务器上有这两个东西。 先获取证书，使用指令 sudo certbot --nginx ，然后配置 Nginx。博主刚开始使用的是 firefish 的 Nginx 配置文件，但是没有成功，后来经热心网友建议，使用 Misskey 的配置文件试试，结果就成功了。 我的配置文件如下： # For WebSocketmap $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125; proxy_cache_path /tmp/nginx_cache_firefish levels=1:2 keys_zone=cache2:16m max_size=1g inactive=720m use_temp_path=off; server &#123; listen 80; listen [::]:80; server_name 你的域名; # For SSL domain validation root /var/www/html; location /.well-known/acme-challenge/ &#123; allow all; &#125; location /.well-known/pki-validation/ &#123; allow all; &#125; location / &#123; return 301 https://$server_name$request_uri; &#125;&#125; server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name 你的域名; ssl_session_timeout 1d; ssl_session_cache shared:ssl_session_cache:10m; ssl_session_tickets off; # To use Let's Encrypt certificate ssl_certificate /etc/letsencrypt/live/你的域名/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/你的域名/privkey.pem; # managed by Certbot # To use Debian/Ubuntu's self-signed certificate (For testing or before issuing a certificate) #ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem; #ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key; # SSL protocol settings ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_prefer_server_ciphers off; ssl_stapling on; ssl_stapling_verify on; # Change to your upload limit client_max_body_size 80m; # Proxy to Node location / &#123; proxy_pass http://127.0.0.1:6110; proxy_set_header Host $host; proxy_http_version 1.1; proxy_redirect off; # For WebSocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # Cache settings proxy_cache cache2; proxy_cache_lock on; proxy_cache_use_stale updating; proxy_force_ranges on; add_header X-Cache $upstream_cache_status; &#125;#1location =/robots.txt &#123;#2 default_type text/html;#3 add_header Content-Type \"text/plain; charset=UTF-8\";#4 return 200 \"User-agent: *\\nDisallow: /\\n\";#5&#125; &#125;注意： 我修改了缓存地址，否则会和原来 Misskey 的缓存地址冲突：proxy_cache_path /tmp/nginx_cache_firefish 将 cache1 改为了 cache2，共 2 处。 端口号要和 docker-compose.yml 和 default.yml 的一致。 需要修改 你的域名 ，共 4 处。 获取完证书和配置好 Nginx 文件之后，试着测试一下： nginx -t , 没有问题的话便是重载和重启 Nginx： nginx -s reloadsystemctl restart nginx（如果是第一次使用 Nginx 的话，不是 restart 而是 start） # 痛苦的排错之路 作为一个小白搭建实例免不了一路红灯 （说的就是 error 呜呜） ，总结了一下，出错原因要么是容器里的服务没有跑起来要么就是 Nginx 搞错了。 Docker 容器 首先 restart 一下容器： docker-compose restart ，这是解决 502 error 最好的办法 （大佬说的） 。 然后看看 docker ps 里面的服务是不是都 up 了。没有的话可能就是配置错了，回去改改配置，最后 docker-compose up -d 来更新容器。 实在不行，就通过 docker compose logs web -f --tail 100 来查看日志。 Nginx 反代 如果是 502 error 的话，如上所说先试试 docker-compose restart 。 如果不行或是其他错误，先用 nginx -t 看看是否成功，没有成功的话可能就是配置文件写错了，注意端口号等等。 test 没有问题的话，再看看 nginx 的 status： sudo systemctl status nginx 。 清理缓存，再用 service nginx reload 重载，然后 systemctl restart nginx 重启。 其他 可以用 curl -v http://localhost:端口号 看能不能拉取到信息。 # 参考资料 docker.md 官方文档","categories":[{"name":"学习笔记","slug":"notes","permalink":"https://nanakumo.github.io/categories/notes/"}],"tags":[{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"}]},{"title":"回归分析 | Python 和 Stata","slug":"如何用统计软件进行回归分析","date":"2023-05-02T06:38:26.496Z","updated":"2023-08-26T14:19:48.353Z","comments":true,"path":"2023/05/02/如何用统计软件进行回归分析/","link":"","permalink":"https://nanakumo.github.io/2023/05/02/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/","excerpt":"是极其潦草的学习笔记 w","text":"是极其潦草的学习笔记 w # Python 篇 # package 的准备 pandas statsmodels openpyxl # 读取文件 要指定好文件的路径 最好使用 names=['x','y'] 来指定说明变量和目标变量。 import pandas as pdfile_pass = r\"D:\\python\\data.xlsx\"df = pd.read_excel(file_pass, header=0, names=['cost', 'sales'])import statsmodels.formula.api as smfmodel = smf.ols('sales ~ cost', data=df)result = model.fit()print(result.summary())输出结果为： OLS Regression Results ==============================================================================Dep. Variable: sales R-squared: 1.000Model: OLS Adj. R-squared: 1.000Method: Least Squares F-statistic: 1.981e+31Date: Tue, 02 May 2023 Prob (F-statistic): 2.50e-47Time: 14:12:47 Log-Likelihood: 153.61No. Observations: 5 AIC: -303.2Df Residuals: 3 BIC: -304.0Df Model: 1 Covariance Type: nonrobust ============================================================================== coef std err t P>|t| [0.025 0.975]------------------------------------------------------------------------------Intercept 10.0000 1.49e-14 6.71e+14 0.000 10.000 10.000cost 2.0000 4.49e-16 4.45e+15 0.000 2.000 2.000==============================================================================Omnibus: nan Durbin-Watson: 0.667Prob(Omnibus): nan Jarque-Bera (JB): 0.375Skew: -0.344 Prob(JB): 0.829Kurtosis: 1.847 Cond. No. 77.8==============================================================================# Stata 篇 # 简单使用 Stata Log in import data save as use data use D:\\python\\data_回归分析.dtaregress 売上高万円 広告費** 注意：** 使用的数据文件一定是.dta 格式，&lt;u&gt; 而这个必须要先导入数据后保存再得到。&lt;/u&gt; 输出： -------------+---------------------------------- F(1, 3) = . Model | 4000 1 4000 Prob &gt; F = . Residual | 0 3 0 R-squared = 1.0000 -------------+---------------------------------- Adj R-squared = 1.0000 Total | 4000 4 1000 Root MSE = 0 ------------------------------------------------------------------------------ 売上高万円 | Coefficient Std. err. t P&gt;|t| [95% conf. interval] -------------+---------------------------------------------------------------- 広告費 | 2 . . . . . _cons | 10 . . . . . ------------------------------------------------------------------------------ # 附录 cost sales 10 30 20 50 30 70 40 90 50 110","categories":[{"name":"学习笔记","slug":"notes","permalink":"https://nanakumo.github.io/categories/notes/"}],"tags":[{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"}]},{"title":"零基础小白的博客搭建全记录（GitHub+Hexo）","slug":"博客搭建全记录","date":"2023-03-23T10:11:37.739Z","updated":"2023-08-26T05:06:32.732Z","comments":true,"path":"2023/03/23/博客搭建全记录/","link":"","permalink":"https://nanakumo.github.io/2023/03/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%AE%B0%E5%BD%95/","excerpt":"2023 年 3 月 23 日，小倖第一次成功通过 GitHub 搭好了 Hexo 的博客。兴奋之余，也想要将这场历时两天的艰辛记录下来。如您所见，小倖是小白，故这篇不是技术帖！！！（其实更像是小倖的碎碎念啦）","text":"2023 年 3 月 23 日，小倖第一次成功通过 GitHub 搭好了 Hexo 的博客。兴奋之余，也想要将这场历时两天的艰辛记录下来。如您所见，小倖是小白，故这篇不是技术帖！！！（其实更像是小倖的碎碎念啦） 小倖真是踩了好多坑。因为 Vercel（一个开箱即用的网站托管平台）已经没有了 Hexo 的框架，因此没有办法懒人建站法 —— 一键通过 Vercel 建站了。小倖在网上也找了很多博客搭建方法，尝试过的有： Cloudflare Pages Github Pages Wordpress Vercel 前两个是一直卡在网站发布上（即在本地查看没有问题，但无法在网页中显示）。Wordpress 是因为太笨重了遂放弃。小倖倒是通过 Vercel 建好了一个 Hugo 的博客，但如前言所说，Vercel 现在已经没有 Hexo 的框架了，因而在搭建 Hexo 博客上一直失败。 ** 补充：** 在网络上，通过 GitHub Pages 部署 Hexo 站点的办法大致分成两种。一种是将本地代码 Push 到远程仓后，在相应 Repo 的 Settings 中找到 Pages，部署是在那里完成的；另一种是通过 hexo d 命令来部署。前者小倖一直失败，后者倒是几乎毫无障碍地建成了，遂推荐。 （为什么小倖一定要一个 Hexo 的博客呢？还不是因为 Hexo Themes 有很多很好看的主题嘛。） 总之，小倖现在终于能够拥有一个可爱的博客啦，很开心☆*: .｡. o (≧▽≦) o .｡.:*☆☆*: .｡ # 博客搭建 # 1. 初识 Hexo Hexo 是友邻推荐给小倖的，小倖也经常在各个地方看到，当然最主要是主题很好看啦，遂采用。Hexo 对于小倖来说有如下几个优点： 发布方便 只需要在 Git Bash 中敲几行代码即可部署到 Github Pages 等平台上。 支持 Markdown 虽然几乎现在所有的平台都支持啦。 海量主题任君挑选 这才是最重要的嘛！ 总之，Hexo 最高！ # 2. 准备工作：环境布置 想要将通过 Hexo 布置站点，首先需要布置 Node.js 和 Git 环境。 这一步不难，只要进入各自的官网中下载就可以了。 Node.js 下载：https://nodejs.org/en/download Git 下载：https://git-scm.com/downloads 如何检验自己是否成功安装呢？可在 Git Bash 中输入如下命令： git versionnode -vnpm -v如果能够出现对应的版本号，则说明安装完成。接下来就可以进入 Hexo 的安装阶段啦。 # 3. 安装 Hexo 这一步也很简单，只需要敲入如下命令： npm install -g hexo-cli #安装 Hexohexo init &lt;文件夹名> #创建文件夹并初始化cd &lt;文件夹名> #进入该文件夹npm install #导入文件这样就会得到包含配置文件 _config.yml 的文件夹啦。你可以在该文件里个性化自己的网站。 其实这样就算建好了一个很简陋的站，如何查看自己的站到底长什么样子呢？可通过运行以下命令： #注意：都要在根目录下进行hexo cl #清理缓存hexo g #产生静态档案hexo s #启动服务器运行完之后，就可以通过 http://localhost:4000 来查看自己的站点啦。不过这时候只是在本地查看，还没有布置在网络上哦。因此接下来就是 —— # 4. 将 Hexo 博客部署到 Github Pages 上 在这一步中，你首先需要拥有一个 GitHub 账号，然后建一个 repo。这一步十分简单，就不多赘述了。建好 repo 之后，建议设置一个 SSH密钥 ，以便通过 SSH 连接 GitHub，而不必总是输入你的用户名和密码。 那么，接下来就试着运行以下代码吧： #首先，让你的笔记本电脑知道你将使用哪个 GitHub 账户git config --global user.name \"GitHub账户名\"git config --global user.email \"GitHub注册邮箱\"#产生一个 SSH 密钥对ssh-keygen -t rsa -C \"GitHub注册邮箱\"运行过程中，电脑会问你要将 SSH 密钥保存在哪个文件夹里，紧接着，你就可以在那个文件夹里看到 id_rsa.pub 这个文件啦。打开它，将内容复制到你的 GitHub 中。 具体方法：在 GitHub 的 settings 中找到 SSH and GPG keys ，打开它，然后新建一个 SSH Key，将剪切板的内容粘贴进去，就大功告成啦！ 在让你的笔记本知道你将使用哪个 GitHub 账户之后，还需要让你的 Hexo 站点知道你使用的是哪一个 repo 。操作方法就是打开网站的配置文件 _config.yml ，找到 deploy 行（一般是在最末），将其修改成以下内容： deploy: type: git repo: 你的仓库链接，通常的格式为 https:&#x2F;&#x2F;github.com&#x2F; 账户名 &#x2F; 仓库名.github.io.git branch: master message: &quot;&#123;&#123; now \\(&#39;YYYY-MM-DD HH:mm:ss&#39; \\) &#125; &#125;&quot; 不过，如果要使用 GitHub Pages，仓库名必须与账户名一致，详情见官方文档。 接下来，就是通过 hexo d 命令来将 Hexo 站点部署到 GitHub Pages 上啦，不过在此之前，需要下载一个 deploy tool 。请在你的 Git Bash 输入 npm install hexo-deployer-git --save 。安装完之后，再键入 hexo d 。恭喜你，你的站点能被大家访问了。 # 5. 博客装修 # 5.1 安装主题文件 如前文所说，目前这个站点还很简陋，因此就到了最激动人心的时刻 —— 网站装修！请尽情在 Hexo Themes 中寻找一款自己心水的主题吧。 具体的安装方法请详见各自主题文件夹中的 README.md 文件，一般步骤为：先将主题文件夹克隆至本地仓，然后修改网站配置文件 _config.yml 中的 theme 行: theme: your_theme 。 # 5.2 修改具体配置 如果你想个性化你的网站，请在主题文件中的 _config.yml 里修改吧。比如为你的网站增添 social link ，还可以为你的网站添加头像和背景图。 # 5.3 增加标签、目录等页面 如果你希望你的文章能够自动归档在对应的页面之下，大多数情况下是需要进行一些设置的。 一般而言，你的主题配置文件中应当是包含以下行的： menu: Home: name: house theme: solid link: / About: name: id-card theme: solid link: /about Archives: name: box-archive theme: solid link: /archives Categories: name: bookmark theme: solid link: /categories Tags: name: tags theme: solid link: /tags如果有的话，那就没有关系，没有的话，还需要自己添加。 接下来，就是替你的网站创建对应的页面，具体操作是在 Git Bash 中敲下： hexo new page tagshexo new page categorieshexo new page about接下来，你就会惊奇地发现，在 source 文件夹之下，不仅有了对应的文件夹，里面还各自都有 index.md 文件！请挨个打开它，然后在文件的最后一行填上 type: '' 。例如，在 tags 的 index.md 中应当填入以下内容： ---title: tagsdate: 2023-03-23 18:50:30type: 'tags'---设置好之后，只需要在你的文章中使用 Front-matter 就好啦。例如： --- title: 零基础小白的博客搭建全记录（GitHub+Hexo） categories: 今天敲点什么代码呢 tags: [博客,hexo,github] --- # 5.4 使用！-- more -- 让博客页面更简洁 由于很多主题的网页浏览都是直接全文显示的，这种时候会让你的网站显得笨重。那么 !-- more -- 就会将其变得简洁！可以参照这篇博文：https://www.jianshu.com/p/78c218f9d1e7 # 5.5 为你的博客开启评论功能吧 目前的评论的系统有很多，大概有： Gitalk Giscus Waline Twikoo 小倖使用的是 Giscus。可以直接在官方文档上面设置，不过有一些前提条件和准备工作： repo 必须是公开的。 安装 giscus app。 为你的 repo 启用 Discussions 功能。 一步一步跟着官方文档来，最后就会到达 启用giscus 这一步。你将会得到如下字段： src=\"https://giscus.app/client.js\" data-repo=\"[ENTER REPO HERE]\" data-repo-id=\"[ENTER REPO ID HERE]\" data-category=\"[ENTER CATEGORY NAME HERE]\" data-category-id=\"[ENTER CATEGORY ID HERE]\" data-mapping=\"pathname\" data-strict=\"0\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"bottom\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async>然后将其写入你的主题配置文件 _config.yml 中即可！小倖是这样写的： giscus: enable: true src: https://giscus.app/client.js repo: nanakumo/nanakumo.github.io repoID: category: categoryID: mapping: pathname strict: 0 reactionsEnabled: 1 emitMetadata: 0 inputPosition: bottom theme: cobalt lang: zh-CN# 写在最后的话 至此，你就可以享受你的博客之旅啦。请记住，每次在本地修改完之后，请一定要 hexo g &amp;&amp; hexo d 噢！","categories":[{"name":"一些有的没的","slug":"other","permalink":"https://nanakumo.github.io/categories/other/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://nanakumo.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://nanakumo.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://nanakumo.github.io/tags/github/"}]}],"categories":[{"name":"歌词翻译","slug":"translate","permalink":"https://nanakumo.github.io/categories/translate/"},{"name":"学习笔记","slug":"notes","permalink":"https://nanakumo.github.io/categories/notes/"},{"name":"一些有的没的","slug":"other","permalink":"https://nanakumo.github.io/categories/other/"}],"tags":[{"name":"日语","slug":"日语","permalink":"https://nanakumo.github.io/tags/%E6%97%A5%E8%AF%AD/"},{"name":"歌词，民工系","slug":"歌词，民工系","permalink":"https://nanakumo.github.io/tags/%E6%AD%8C%E8%AF%8D%EF%BC%8C%E6%B0%91%E5%B7%A5%E7%B3%BB/"},{"name":"歌词","slug":"歌词","permalink":"https://nanakumo.github.io/tags/%E6%AD%8C%E8%AF%8D/"},{"name":"坂道系","slug":"坂道系","permalink":"https://nanakumo.github.io/tags/%E5%9D%82%E9%81%93%E7%B3%BB/"},{"name":"数据分析","slug":"数据分析","permalink":"https://nanakumo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"因果推论","slug":"因果推论","permalink":"https://nanakumo.github.io/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E8%AE%BA/"},{"name":"计量经济学","slug":"计量经济学","permalink":"https://nanakumo.github.io/tags/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6/"},{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://nanakumo.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"},{"name":"Fediverse","slug":"Fediverse","permalink":"https://nanakumo.github.io/tags/Fediverse/"},{"name":"Firefish","slug":"Firefish","permalink":"https://nanakumo.github.io/tags/Firefish/"},{"name":"Dokcer","slug":"Dokcer","permalink":"https://nanakumo.github.io/tags/Dokcer/"},{"name":"经济统计","slug":"经济统计","permalink":"https://nanakumo.github.io/tags/%E7%BB%8F%E6%B5%8E%E7%BB%9F%E8%AE%A1/"},{"name":"Python","slug":"Python","permalink":"https://nanakumo.github.io/tags/Python/"},{"name":"Stata","slug":"Stata","permalink":"https://nanakumo.github.io/tags/Stata/"},{"name":"博客","slug":"博客","permalink":"https://nanakumo.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://nanakumo.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://nanakumo.github.io/tags/github/"}]}